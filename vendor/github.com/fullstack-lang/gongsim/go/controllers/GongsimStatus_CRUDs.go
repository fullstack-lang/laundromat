// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsim/go/models"
	"github.com/fullstack-lang/gongsim/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __GongsimStatus__dummysDeclaration__ models.GongsimStatus
var __GongsimStatus_time__dummyDeclaration time.Duration

// An GongsimStatusID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGongsimStatus updateGongsimStatus deleteGongsimStatus
type GongsimStatusID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GongsimStatusInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGongsimStatus updateGongsimStatus
type GongsimStatusInput struct {
	// The GongsimStatus to submit or modify
	// in: body
	GongsimStatus *orm.GongsimStatusAPI
}

// GetGongsimStatuss
//
// swagger:route GET /gongsimstatuss gongsimstatuss getGongsimStatuss
//
// Get all gongsimstatuss
//
// Responses:
//    default: genericError
//        200: gongsimstatusDBsResponse
func GetGongsimStatuss(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongsimStatus.GetDB()

	// source slice
	var gongsimstatusDBs []orm.GongsimStatusDB
	query := db.Find(&gongsimstatusDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	gongsimstatusAPIs := make([]orm.GongsimStatusAPI, 0)

	// for each gongsimstatus, update fields from the database nullable fields
	for idx := range gongsimstatusDBs {
		gongsimstatusDB := &gongsimstatusDBs[idx]
		_ = gongsimstatusDB
		var gongsimstatusAPI orm.GongsimStatusAPI

		// insertion point for updating fields
		gongsimstatusAPI.ID = gongsimstatusDB.ID
		gongsimstatusDB.CopyBasicFieldsToGongsimStatus(&gongsimstatusAPI.GongsimStatus)
		gongsimstatusAPI.GongsimStatusPointersEnconding = gongsimstatusDB.GongsimStatusPointersEnconding
		gongsimstatusAPIs = append(gongsimstatusAPIs, gongsimstatusAPI)
	}

	c.JSON(http.StatusOK, gongsimstatusAPIs)
}

// PostGongsimStatus
//
// swagger:route POST /gongsimstatuss gongsimstatuss postGongsimStatus
//
// Creates a gongsimstatus
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: gongsimstatusDBResponse
func PostGongsimStatus(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongsimStatus.GetDB()

	// Validate input
	var input orm.GongsimStatusAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gongsimstatus
	gongsimstatusDB := orm.GongsimStatusDB{}
	gongsimstatusDB.GongsimStatusPointersEnconding = input.GongsimStatusPointersEnconding
	gongsimstatusDB.CopyBasicFieldsFromGongsimStatus(&input.GongsimStatus)

	query := db.Create(&gongsimstatusDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gongsimstatusDB)
}

// GetGongsimStatus
//
// swagger:route GET /gongsimstatuss/{ID} gongsimstatuss getGongsimStatus
//
// Gets the details for a gongsimstatus.
//
// Responses:
//    default: genericError
//        200: gongsimstatusDBResponse
func GetGongsimStatus(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongsimStatus.GetDB()

	// Get gongsimstatusDB in DB
	var gongsimstatusDB orm.GongsimStatusDB
	if err := db.First(&gongsimstatusDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var gongsimstatusAPI orm.GongsimStatusAPI
	gongsimstatusAPI.ID = gongsimstatusDB.ID
	gongsimstatusAPI.GongsimStatusPointersEnconding = gongsimstatusDB.GongsimStatusPointersEnconding
	gongsimstatusDB.CopyBasicFieldsToGongsimStatus(&gongsimstatusAPI.GongsimStatus)

	c.JSON(http.StatusOK, gongsimstatusAPI)
}

// UpdateGongsimStatus
//
// swagger:route PATCH /gongsimstatuss/{ID} gongsimstatuss updateGongsimStatus
//
// Update a gongsimstatus
//
// Responses:
//    default: genericError
//        200: gongsimstatusDBResponse
func UpdateGongsimStatus(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongsimStatus.GetDB()

	// Get model if exist
	var gongsimstatusDB orm.GongsimStatusDB

	// fetch the gongsimstatus
	query := db.First(&gongsimstatusDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GongsimStatusAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	gongsimstatusDB.CopyBasicFieldsFromGongsimStatus(&input.GongsimStatus)
	gongsimstatusDB.GongsimStatusPointersEnconding = input.GongsimStatusPointersEnconding

	query = db.Model(&gongsimstatusDB).Updates(gongsimstatusDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the gongsimstatusDB
	c.JSON(http.StatusOK, gongsimstatusDB)
}

// DeleteGongsimStatus
//
// swagger:route DELETE /gongsimstatuss/{ID} gongsimstatuss deleteGongsimStatus
//
// Delete a gongsimstatus
//
// Responses:
//    default: genericError
func DeleteGongsimStatus(c *gin.Context) {
	db := orm.BackRepo.BackRepoGongsimStatus.GetDB()

	// Get model if exist
	var gongsimstatusDB orm.GongsimStatusDB
	if err := db.First(&gongsimstatusDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&gongsimstatusDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
