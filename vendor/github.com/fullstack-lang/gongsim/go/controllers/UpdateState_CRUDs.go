// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsim/go/models"
	"github.com/fullstack-lang/gongsim/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __UpdateState__dummysDeclaration__ models.UpdateState
var __UpdateState_time__dummyDeclaration time.Duration

// An UpdateStateID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getUpdateState updateUpdateState deleteUpdateState
type UpdateStateID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// UpdateStateInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postUpdateState updateUpdateState
type UpdateStateInput struct {
	// The UpdateState to submit or modify
	// in: body
	UpdateState *orm.UpdateStateAPI
}

// GetUpdateStates
//
// swagger:route GET /updatestates updatestates getUpdateStates
//
// Get all updatestates
//
// Responses:
//    default: genericError
//        200: updatestateDBsResponse
func GetUpdateStates(c *gin.Context) {
	db := orm.BackRepo.BackRepoUpdateState.GetDB()

	// source slice
	var updatestateDBs []orm.UpdateStateDB
	query := db.Find(&updatestateDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	updatestateAPIs := make([]orm.UpdateStateAPI, 0)

	// for each updatestate, update fields from the database nullable fields
	for idx := range updatestateDBs {
		updatestateDB := &updatestateDBs[idx]
		_ = updatestateDB
		var updatestateAPI orm.UpdateStateAPI

		// insertion point for updating fields
		updatestateAPI.ID = updatestateDB.ID
		updatestateDB.CopyBasicFieldsToUpdateState(&updatestateAPI.UpdateState)
		updatestateAPI.UpdateStatePointersEnconding = updatestateDB.UpdateStatePointersEnconding
		updatestateAPIs = append(updatestateAPIs, updatestateAPI)
	}

	c.JSON(http.StatusOK, updatestateAPIs)
}

// PostUpdateState
//
// swagger:route POST /updatestates updatestates postUpdateState
//
// Creates a updatestate
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: updatestateDBResponse
func PostUpdateState(c *gin.Context) {
	db := orm.BackRepo.BackRepoUpdateState.GetDB()

	// Validate input
	var input orm.UpdateStateAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create updatestate
	updatestateDB := orm.UpdateStateDB{}
	updatestateDB.UpdateStatePointersEnconding = input.UpdateStatePointersEnconding
	updatestateDB.CopyBasicFieldsFromUpdateState(&input.UpdateState)

	query := db.Create(&updatestateDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, updatestateDB)
}

// GetUpdateState
//
// swagger:route GET /updatestates/{ID} updatestates getUpdateState
//
// Gets the details for a updatestate.
//
// Responses:
//    default: genericError
//        200: updatestateDBResponse
func GetUpdateState(c *gin.Context) {
	db := orm.BackRepo.BackRepoUpdateState.GetDB()

	// Get updatestateDB in DB
	var updatestateDB orm.UpdateStateDB
	if err := db.First(&updatestateDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var updatestateAPI orm.UpdateStateAPI
	updatestateAPI.ID = updatestateDB.ID
	updatestateAPI.UpdateStatePointersEnconding = updatestateDB.UpdateStatePointersEnconding
	updatestateDB.CopyBasicFieldsToUpdateState(&updatestateAPI.UpdateState)

	c.JSON(http.StatusOK, updatestateAPI)
}

// UpdateUpdateState
//
// swagger:route PATCH /updatestates/{ID} updatestates updateUpdateState
//
// Update a updatestate
//
// Responses:
//    default: genericError
//        200: updatestateDBResponse
func UpdateUpdateState(c *gin.Context) {
	db := orm.BackRepo.BackRepoUpdateState.GetDB()

	// Get model if exist
	var updatestateDB orm.UpdateStateDB

	// fetch the updatestate
	query := db.First(&updatestateDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.UpdateStateAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	updatestateDB.CopyBasicFieldsFromUpdateState(&input.UpdateState)
	updatestateDB.UpdateStatePointersEnconding = input.UpdateStatePointersEnconding

	query = db.Model(&updatestateDB).Updates(updatestateDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the updatestateDB
	c.JSON(http.StatusOK, updatestateDB)
}

// DeleteUpdateState
//
// swagger:route DELETE /updatestates/{ID} updatestates deleteUpdateState
//
// Delete a updatestate
//
// Responses:
//    default: genericError
func DeleteUpdateState(c *gin.Context) {
	db := orm.BackRepo.BackRepoUpdateState.GetDB()

	// Get model if exist
	var updatestateDB orm.UpdateStateDB
	if err := db.First(&updatestateDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&updatestateDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
