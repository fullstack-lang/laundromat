// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	DummyAgents           map[*DummyAgent]struct{}
	DummyAgents_mapString map[string]*DummyAgent

	Engines           map[*Engine]struct{}
	Engines_mapString map[string]*Engine

	Events           map[*Event]struct{}
	Events_mapString map[string]*Event

	GongsimCommands           map[*GongsimCommand]struct{}
	GongsimCommands_mapString map[string]*GongsimCommand

	GongsimStatuss           map[*GongsimStatus]struct{}
	GongsimStatuss_mapString map[string]*GongsimStatus

	UpdateStates           map[*UpdateState]struct{}
	UpdateStates_mapString map[string]*UpdateState

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitDummyAgent(dummyagent *DummyAgent)
	CheckoutDummyAgent(dummyagent *DummyAgent)
	CommitEngine(engine *Engine)
	CheckoutEngine(engine *Engine)
	CommitEvent(event *Event)
	CheckoutEvent(event *Event)
	CommitGongsimCommand(gongsimcommand *GongsimCommand)
	CheckoutGongsimCommand(gongsimcommand *GongsimCommand)
	CommitGongsimStatus(gongsimstatus *GongsimStatus)
	CheckoutGongsimStatus(gongsimstatus *GongsimStatus)
	CommitUpdateState(updatestate *UpdateState)
	CheckoutUpdateState(updatestate *UpdateState)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	DummyAgents:           make(map[*DummyAgent]struct{}),
	DummyAgents_mapString: make(map[string]*DummyAgent),

	Engines:           make(map[*Engine]struct{}),
	Engines_mapString: make(map[string]*Engine),

	Events:           make(map[*Event]struct{}),
	Events_mapString: make(map[string]*Event),

	GongsimCommands:           make(map[*GongsimCommand]struct{}),
	GongsimCommands_mapString: make(map[string]*GongsimCommand),

	GongsimStatuss:           make(map[*GongsimStatus]struct{}),
	GongsimStatuss_mapString: make(map[string]*GongsimStatus),

	UpdateStates:           make(map[*UpdateState]struct{}),
	UpdateStates_mapString: make(map[string]*UpdateState),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["DummyAgent"] = len(stage.DummyAgents)
	stage.Map_GongStructName_InstancesNb["Engine"] = len(stage.Engines)
	stage.Map_GongStructName_InstancesNb["Event"] = len(stage.Events)
	stage.Map_GongStructName_InstancesNb["GongsimCommand"] = len(stage.GongsimCommands)
	stage.Map_GongStructName_InstancesNb["GongsimStatus"] = len(stage.GongsimStatuss)
	stage.Map_GongStructName_InstancesNb["UpdateState"] = len(stage.UpdateStates)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getDummyAgentOrderedStructWithNameField() []*DummyAgent {
	// have alphabetical order generation
	dummyagentOrdered := []*DummyAgent{}
	for dummyagent := range stage.DummyAgents {
		dummyagentOrdered = append(dummyagentOrdered, dummyagent)
	}
	sort.Slice(dummyagentOrdered[:], func(i, j int) bool {
		return dummyagentOrdered[i].Name < dummyagentOrdered[j].Name
	})
	return dummyagentOrdered
}

// Stage puts dummyagent to the model stage
func (dummyagent *DummyAgent) Stage() *DummyAgent {
	Stage.DummyAgents[dummyagent] = __member
	Stage.DummyAgents_mapString[dummyagent.Name] = dummyagent

	return dummyagent
}

// Unstage removes dummyagent off the model stage
func (dummyagent *DummyAgent) Unstage() *DummyAgent {
	delete(Stage.DummyAgents, dummyagent)
	delete(Stage.DummyAgents_mapString, dummyagent.Name)
	return dummyagent
}

// commit dummyagent to the back repo (if it is already staged)
func (dummyagent *DummyAgent) Commit() *DummyAgent {
	if _, ok := Stage.DummyAgents[dummyagent]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitDummyAgent(dummyagent)
		}
	}
	return dummyagent
}

// Checkout dummyagent to the back repo (if it is already staged)
func (dummyagent *DummyAgent) Checkout() *DummyAgent {
	if _, ok := Stage.DummyAgents[dummyagent]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutDummyAgent(dummyagent)
		}
	}
	return dummyagent
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of dummyagent to the model stage
func (dummyagent *DummyAgent) StageCopy() *DummyAgent {
	_dummyagent := new(DummyAgent)
	*_dummyagent = *dummyagent
	_dummyagent.Stage()
	return _dummyagent
}

// StageAndCommit appends dummyagent to the model stage and commit to the orm repo
func (dummyagent *DummyAgent) StageAndCommit() *DummyAgent {
	dummyagent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDummyAgent(dummyagent)
	}
	return dummyagent
}

// DeleteStageAndCommit appends dummyagent to the model stage and commit to the orm repo
func (dummyagent *DummyAgent) DeleteStageAndCommit() *DummyAgent {
	dummyagent.Unstage()
	DeleteORMDummyAgent(dummyagent)
	return dummyagent
}

// StageCopyAndCommit appends a copy of dummyagent to the model stage and commit to the orm repo
func (dummyagent *DummyAgent) StageCopyAndCommit() *DummyAgent {
	_dummyagent := new(DummyAgent)
	*_dummyagent = *dummyagent
	_dummyagent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDummyAgent(dummyagent)
	}
	return _dummyagent
}

// CreateORMDummyAgent enables dynamic staging of a DummyAgent instance
func CreateORMDummyAgent(dummyagent *DummyAgent) {
	dummyagent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDummyAgent(dummyagent)
	}
}

// DeleteORMDummyAgent enables dynamic staging of a DummyAgent instance
func DeleteORMDummyAgent(dummyagent *DummyAgent) {
	dummyagent.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMDummyAgent(dummyagent)
	}
}

func (stage *StageStruct) getEngineOrderedStructWithNameField() []*Engine {
	// have alphabetical order generation
	engineOrdered := []*Engine{}
	for engine := range stage.Engines {
		engineOrdered = append(engineOrdered, engine)
	}
	sort.Slice(engineOrdered[:], func(i, j int) bool {
		return engineOrdered[i].Name < engineOrdered[j].Name
	})
	return engineOrdered
}

// Stage puts engine to the model stage
func (engine *Engine) Stage() *Engine {
	Stage.Engines[engine] = __member
	Stage.Engines_mapString[engine.Name] = engine

	return engine
}

// Unstage removes engine off the model stage
func (engine *Engine) Unstage() *Engine {
	delete(Stage.Engines, engine)
	delete(Stage.Engines_mapString, engine.Name)
	return engine
}

// commit engine to the back repo (if it is already staged)
func (engine *Engine) Commit() *Engine {
	if _, ok := Stage.Engines[engine]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitEngine(engine)
		}
	}
	return engine
}

// Checkout engine to the back repo (if it is already staged)
func (engine *Engine) Checkout() *Engine {
	if _, ok := Stage.Engines[engine]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutEngine(engine)
		}
	}
	return engine
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of engine to the model stage
func (engine *Engine) StageCopy() *Engine {
	_engine := new(Engine)
	*_engine = *engine
	_engine.Stage()
	return _engine
}

// StageAndCommit appends engine to the model stage and commit to the orm repo
func (engine *Engine) StageAndCommit() *Engine {
	engine.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEngine(engine)
	}
	return engine
}

// DeleteStageAndCommit appends engine to the model stage and commit to the orm repo
func (engine *Engine) DeleteStageAndCommit() *Engine {
	engine.Unstage()
	DeleteORMEngine(engine)
	return engine
}

// StageCopyAndCommit appends a copy of engine to the model stage and commit to the orm repo
func (engine *Engine) StageCopyAndCommit() *Engine {
	_engine := new(Engine)
	*_engine = *engine
	_engine.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEngine(engine)
	}
	return _engine
}

// CreateORMEngine enables dynamic staging of a Engine instance
func CreateORMEngine(engine *Engine) {
	engine.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEngine(engine)
	}
}

// DeleteORMEngine enables dynamic staging of a Engine instance
func DeleteORMEngine(engine *Engine) {
	engine.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMEngine(engine)
	}
}

func (stage *StageStruct) getEventOrderedStructWithNameField() []*Event {
	// have alphabetical order generation
	eventOrdered := []*Event{}
	for event := range stage.Events {
		eventOrdered = append(eventOrdered, event)
	}
	sort.Slice(eventOrdered[:], func(i, j int) bool {
		return eventOrdered[i].Name < eventOrdered[j].Name
	})
	return eventOrdered
}

// Stage puts event to the model stage
func (event *Event) Stage() *Event {
	Stage.Events[event] = __member
	Stage.Events_mapString[event.Name] = event

	return event
}

// Unstage removes event off the model stage
func (event *Event) Unstage() *Event {
	delete(Stage.Events, event)
	delete(Stage.Events_mapString, event.Name)
	return event
}

// commit event to the back repo (if it is already staged)
func (event *Event) Commit() *Event {
	if _, ok := Stage.Events[event]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitEvent(event)
		}
	}
	return event
}

// Checkout event to the back repo (if it is already staged)
func (event *Event) Checkout() *Event {
	if _, ok := Stage.Events[event]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutEvent(event)
		}
	}
	return event
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of event to the model stage
func (event *Event) StageCopy() *Event {
	_event := new(Event)
	*_event = *event
	_event.Stage()
	return _event
}

// StageAndCommit appends event to the model stage and commit to the orm repo
func (event *Event) StageAndCommit() *Event {
	event.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEvent(event)
	}
	return event
}

// DeleteStageAndCommit appends event to the model stage and commit to the orm repo
func (event *Event) DeleteStageAndCommit() *Event {
	event.Unstage()
	DeleteORMEvent(event)
	return event
}

// StageCopyAndCommit appends a copy of event to the model stage and commit to the orm repo
func (event *Event) StageCopyAndCommit() *Event {
	_event := new(Event)
	*_event = *event
	_event.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEvent(event)
	}
	return _event
}

// CreateORMEvent enables dynamic staging of a Event instance
func CreateORMEvent(event *Event) {
	event.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEvent(event)
	}
}

// DeleteORMEvent enables dynamic staging of a Event instance
func DeleteORMEvent(event *Event) {
	event.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMEvent(event)
	}
}

func (stage *StageStruct) getGongsimCommandOrderedStructWithNameField() []*GongsimCommand {
	// have alphabetical order generation
	gongsimcommandOrdered := []*GongsimCommand{}
	for gongsimcommand := range stage.GongsimCommands {
		gongsimcommandOrdered = append(gongsimcommandOrdered, gongsimcommand)
	}
	sort.Slice(gongsimcommandOrdered[:], func(i, j int) bool {
		return gongsimcommandOrdered[i].Name < gongsimcommandOrdered[j].Name
	})
	return gongsimcommandOrdered
}

// Stage puts gongsimcommand to the model stage
func (gongsimcommand *GongsimCommand) Stage() *GongsimCommand {
	Stage.GongsimCommands[gongsimcommand] = __member
	Stage.GongsimCommands_mapString[gongsimcommand.Name] = gongsimcommand

	return gongsimcommand
}

// Unstage removes gongsimcommand off the model stage
func (gongsimcommand *GongsimCommand) Unstage() *GongsimCommand {
	delete(Stage.GongsimCommands, gongsimcommand)
	delete(Stage.GongsimCommands_mapString, gongsimcommand.Name)
	return gongsimcommand
}

// commit gongsimcommand to the back repo (if it is already staged)
func (gongsimcommand *GongsimCommand) Commit() *GongsimCommand {
	if _, ok := Stage.GongsimCommands[gongsimcommand]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongsimCommand(gongsimcommand)
		}
	}
	return gongsimcommand
}

// Checkout gongsimcommand to the back repo (if it is already staged)
func (gongsimcommand *GongsimCommand) Checkout() *GongsimCommand {
	if _, ok := Stage.GongsimCommands[gongsimcommand]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongsimCommand(gongsimcommand)
		}
	}
	return gongsimcommand
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongsimcommand to the model stage
func (gongsimcommand *GongsimCommand) StageCopy() *GongsimCommand {
	_gongsimcommand := new(GongsimCommand)
	*_gongsimcommand = *gongsimcommand
	_gongsimcommand.Stage()
	return _gongsimcommand
}

// StageAndCommit appends gongsimcommand to the model stage and commit to the orm repo
func (gongsimcommand *GongsimCommand) StageAndCommit() *GongsimCommand {
	gongsimcommand.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimCommand(gongsimcommand)
	}
	return gongsimcommand
}

// DeleteStageAndCommit appends gongsimcommand to the model stage and commit to the orm repo
func (gongsimcommand *GongsimCommand) DeleteStageAndCommit() *GongsimCommand {
	gongsimcommand.Unstage()
	DeleteORMGongsimCommand(gongsimcommand)
	return gongsimcommand
}

// StageCopyAndCommit appends a copy of gongsimcommand to the model stage and commit to the orm repo
func (gongsimcommand *GongsimCommand) StageCopyAndCommit() *GongsimCommand {
	_gongsimcommand := new(GongsimCommand)
	*_gongsimcommand = *gongsimcommand
	_gongsimcommand.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimCommand(gongsimcommand)
	}
	return _gongsimcommand
}

// CreateORMGongsimCommand enables dynamic staging of a GongsimCommand instance
func CreateORMGongsimCommand(gongsimcommand *GongsimCommand) {
	gongsimcommand.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimCommand(gongsimcommand)
	}
}

// DeleteORMGongsimCommand enables dynamic staging of a GongsimCommand instance
func DeleteORMGongsimCommand(gongsimcommand *GongsimCommand) {
	gongsimcommand.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongsimCommand(gongsimcommand)
	}
}

func (stage *StageStruct) getGongsimStatusOrderedStructWithNameField() []*GongsimStatus {
	// have alphabetical order generation
	gongsimstatusOrdered := []*GongsimStatus{}
	for gongsimstatus := range stage.GongsimStatuss {
		gongsimstatusOrdered = append(gongsimstatusOrdered, gongsimstatus)
	}
	sort.Slice(gongsimstatusOrdered[:], func(i, j int) bool {
		return gongsimstatusOrdered[i].Name < gongsimstatusOrdered[j].Name
	})
	return gongsimstatusOrdered
}

// Stage puts gongsimstatus to the model stage
func (gongsimstatus *GongsimStatus) Stage() *GongsimStatus {
	Stage.GongsimStatuss[gongsimstatus] = __member
	Stage.GongsimStatuss_mapString[gongsimstatus.Name] = gongsimstatus

	return gongsimstatus
}

// Unstage removes gongsimstatus off the model stage
func (gongsimstatus *GongsimStatus) Unstage() *GongsimStatus {
	delete(Stage.GongsimStatuss, gongsimstatus)
	delete(Stage.GongsimStatuss_mapString, gongsimstatus.Name)
	return gongsimstatus
}

// commit gongsimstatus to the back repo (if it is already staged)
func (gongsimstatus *GongsimStatus) Commit() *GongsimStatus {
	if _, ok := Stage.GongsimStatuss[gongsimstatus]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongsimStatus(gongsimstatus)
		}
	}
	return gongsimstatus
}

// Checkout gongsimstatus to the back repo (if it is already staged)
func (gongsimstatus *GongsimStatus) Checkout() *GongsimStatus {
	if _, ok := Stage.GongsimStatuss[gongsimstatus]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongsimStatus(gongsimstatus)
		}
	}
	return gongsimstatus
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongsimstatus to the model stage
func (gongsimstatus *GongsimStatus) StageCopy() *GongsimStatus {
	_gongsimstatus := new(GongsimStatus)
	*_gongsimstatus = *gongsimstatus
	_gongsimstatus.Stage()
	return _gongsimstatus
}

// StageAndCommit appends gongsimstatus to the model stage and commit to the orm repo
func (gongsimstatus *GongsimStatus) StageAndCommit() *GongsimStatus {
	gongsimstatus.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimStatus(gongsimstatus)
	}
	return gongsimstatus
}

// DeleteStageAndCommit appends gongsimstatus to the model stage and commit to the orm repo
func (gongsimstatus *GongsimStatus) DeleteStageAndCommit() *GongsimStatus {
	gongsimstatus.Unstage()
	DeleteORMGongsimStatus(gongsimstatus)
	return gongsimstatus
}

// StageCopyAndCommit appends a copy of gongsimstatus to the model stage and commit to the orm repo
func (gongsimstatus *GongsimStatus) StageCopyAndCommit() *GongsimStatus {
	_gongsimstatus := new(GongsimStatus)
	*_gongsimstatus = *gongsimstatus
	_gongsimstatus.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimStatus(gongsimstatus)
	}
	return _gongsimstatus
}

// CreateORMGongsimStatus enables dynamic staging of a GongsimStatus instance
func CreateORMGongsimStatus(gongsimstatus *GongsimStatus) {
	gongsimstatus.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimStatus(gongsimstatus)
	}
}

// DeleteORMGongsimStatus enables dynamic staging of a GongsimStatus instance
func DeleteORMGongsimStatus(gongsimstatus *GongsimStatus) {
	gongsimstatus.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongsimStatus(gongsimstatus)
	}
}

func (stage *StageStruct) getUpdateStateOrderedStructWithNameField() []*UpdateState {
	// have alphabetical order generation
	updatestateOrdered := []*UpdateState{}
	for updatestate := range stage.UpdateStates {
		updatestateOrdered = append(updatestateOrdered, updatestate)
	}
	sort.Slice(updatestateOrdered[:], func(i, j int) bool {
		return updatestateOrdered[i].Name < updatestateOrdered[j].Name
	})
	return updatestateOrdered
}

// Stage puts updatestate to the model stage
func (updatestate *UpdateState) Stage() *UpdateState {
	Stage.UpdateStates[updatestate] = __member
	Stage.UpdateStates_mapString[updatestate.Name] = updatestate

	return updatestate
}

// Unstage removes updatestate off the model stage
func (updatestate *UpdateState) Unstage() *UpdateState {
	delete(Stage.UpdateStates, updatestate)
	delete(Stage.UpdateStates_mapString, updatestate.Name)
	return updatestate
}

// commit updatestate to the back repo (if it is already staged)
func (updatestate *UpdateState) Commit() *UpdateState {
	if _, ok := Stage.UpdateStates[updatestate]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitUpdateState(updatestate)
		}
	}
	return updatestate
}

// Checkout updatestate to the back repo (if it is already staged)
func (updatestate *UpdateState) Checkout() *UpdateState {
	if _, ok := Stage.UpdateStates[updatestate]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutUpdateState(updatestate)
		}
	}
	return updatestate
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of updatestate to the model stage
func (updatestate *UpdateState) StageCopy() *UpdateState {
	_updatestate := new(UpdateState)
	*_updatestate = *updatestate
	_updatestate.Stage()
	return _updatestate
}

// StageAndCommit appends updatestate to the model stage and commit to the orm repo
func (updatestate *UpdateState) StageAndCommit() *UpdateState {
	updatestate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdateState(updatestate)
	}
	return updatestate
}

// DeleteStageAndCommit appends updatestate to the model stage and commit to the orm repo
func (updatestate *UpdateState) DeleteStageAndCommit() *UpdateState {
	updatestate.Unstage()
	DeleteORMUpdateState(updatestate)
	return updatestate
}

// StageCopyAndCommit appends a copy of updatestate to the model stage and commit to the orm repo
func (updatestate *UpdateState) StageCopyAndCommit() *UpdateState {
	_updatestate := new(UpdateState)
	*_updatestate = *updatestate
	_updatestate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdateState(updatestate)
	}
	return _updatestate
}

// CreateORMUpdateState enables dynamic staging of a UpdateState instance
func CreateORMUpdateState(updatestate *UpdateState) {
	updatestate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdateState(updatestate)
	}
}

// DeleteORMUpdateState enables dynamic staging of a UpdateState instance
func DeleteORMUpdateState(updatestate *UpdateState) {
	updatestate.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMUpdateState(updatestate)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMDummyAgent(DummyAgent *DummyAgent)
	CreateORMEngine(Engine *Engine)
	CreateORMEvent(Event *Event)
	CreateORMGongsimCommand(GongsimCommand *GongsimCommand)
	CreateORMGongsimStatus(GongsimStatus *GongsimStatus)
	CreateORMUpdateState(UpdateState *UpdateState)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMDummyAgent(DummyAgent *DummyAgent)
	DeleteORMEngine(Engine *Engine)
	DeleteORMEvent(Event *Event)
	DeleteORMGongsimCommand(GongsimCommand *GongsimCommand)
	DeleteORMGongsimStatus(GongsimStatus *GongsimStatus)
	DeleteORMUpdateState(UpdateState *UpdateState)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.DummyAgents = make(map[*DummyAgent]struct{})
	stage.DummyAgents_mapString = make(map[string]*DummyAgent)

	stage.Engines = make(map[*Engine]struct{})
	stage.Engines_mapString = make(map[string]*Engine)

	stage.Events = make(map[*Event]struct{})
	stage.Events_mapString = make(map[string]*Event)

	stage.GongsimCommands = make(map[*GongsimCommand]struct{})
	stage.GongsimCommands_mapString = make(map[string]*GongsimCommand)

	stage.GongsimStatuss = make(map[*GongsimStatus]struct{})
	stage.GongsimStatuss_mapString = make(map[string]*GongsimStatus)

	stage.UpdateStates = make(map[*UpdateState]struct{})
	stage.UpdateStates_mapString = make(map[string]*UpdateState)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.DummyAgents = nil
	stage.DummyAgents_mapString = nil

	stage.Engines = nil
	stage.Engines_mapString = nil

	stage.Events = nil
	stage.Events_mapString = nil

	stage.GongsimCommands = nil
	stage.GongsimCommands_mapString = nil

	stage.GongsimStatuss = nil
	stage.GongsimStatuss_mapString = nil

	stage.UpdateStates = nil
	stage.UpdateStates_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = "{{GeneratedFieldNameValue}}"`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_DummyAgent_Identifiers := make(map[*DummyAgent]string)
	_ = map_DummyAgent_Identifiers

	dummyagentOrdered := []*DummyAgent{}
	for dummyagent := range stage.DummyAgents {
		dummyagentOrdered = append(dummyagentOrdered, dummyagent)
	}
	sort.Slice(dummyagentOrdered[:], func(i, j int) bool {
		return dummyagentOrdered[i].Name < dummyagentOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of DummyAgent")
	for idx, dummyagent := range dummyagentOrdered {

		id = generatesIdentifier("DummyAgent", idx, dummyagent.Name)
		map_DummyAgent_Identifiers[dummyagent] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "DummyAgent")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", dummyagent.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// DummyAgent %s values setup", dummyagent.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TechName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(dummyagent.TechName))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(dummyagent.Name))
		initializerStatements += setValueField

	}

	map_Engine_Identifiers := make(map[*Engine]string)
	_ = map_Engine_Identifiers

	engineOrdered := []*Engine{}
	for engine := range stage.Engines {
		engineOrdered = append(engineOrdered, engine)
	}
	sort.Slice(engineOrdered[:], func(i, j int) bool {
		return engineOrdered[i].Name < engineOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Engine")
	for idx, engine := range engineOrdered {

		id = generatesIdentifier("Engine", idx, engine.Name)
		map_Engine_Identifiers[engine] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Engine")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", engine.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Engine %s values setup", engine.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(engine.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "EndTime")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(engine.EndTime))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CurrentTime")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(engine.CurrentTime))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "SecondsSinceStart")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", engine.SecondsSinceStart))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Fired")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", engine.Fired))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ControlMode")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(engine.ControlMode))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "State")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(engine.State))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Speed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", engine.Speed))
		initializerStatements += setValueField

	}

	map_Event_Identifiers := make(map[*Event]string)
	_ = map_Event_Identifiers

	eventOrdered := []*Event{}
	for event := range stage.Events {
		eventOrdered = append(eventOrdered, event)
	}
	sort.Slice(eventOrdered[:], func(i, j int) bool {
		return eventOrdered[i].Name < eventOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Event")
	for idx, event := range eventOrdered {

		id = generatesIdentifier("Event", idx, event.Name)
		map_Event_Identifiers[event] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Event")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", event.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Event %s values setup", event.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(event.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Duration")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", event.Duration))
		initializerStatements += setValueField

	}

	map_GongsimCommand_Identifiers := make(map[*GongsimCommand]string)
	_ = map_GongsimCommand_Identifiers

	gongsimcommandOrdered := []*GongsimCommand{}
	for gongsimcommand := range stage.GongsimCommands {
		gongsimcommandOrdered = append(gongsimcommandOrdered, gongsimcommand)
	}
	sort.Slice(gongsimcommandOrdered[:], func(i, j int) bool {
		return gongsimcommandOrdered[i].Name < gongsimcommandOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongsimCommand")
	for idx, gongsimcommand := range gongsimcommandOrdered {

		id = generatesIdentifier("GongsimCommand", idx, gongsimcommand.Name)
		map_GongsimCommand_Identifiers[gongsimcommand] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongsimCommand")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongsimcommand.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongsimCommand %s values setup", gongsimcommand.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongsimcommand.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Command")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongsimcommand.Command))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CommandDate")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongsimcommand.CommandDate))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "SpeedCommandType")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongsimcommand.SpeedCommandType))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DateSpeedCommand")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongsimcommand.DateSpeedCommand))
		initializerStatements += setValueField

	}

	map_GongsimStatus_Identifiers := make(map[*GongsimStatus]string)
	_ = map_GongsimStatus_Identifiers

	gongsimstatusOrdered := []*GongsimStatus{}
	for gongsimstatus := range stage.GongsimStatuss {
		gongsimstatusOrdered = append(gongsimstatusOrdered, gongsimstatus)
	}
	sort.Slice(gongsimstatusOrdered[:], func(i, j int) bool {
		return gongsimstatusOrdered[i].Name < gongsimstatusOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of GongsimStatus")
	for idx, gongsimstatus := range gongsimstatusOrdered {

		id = generatesIdentifier("GongsimStatus", idx, gongsimstatus.Name)
		map_GongsimStatus_Identifiers[gongsimstatus] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "GongsimStatus")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gongsimstatus.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// GongsimStatus %s values setup", gongsimstatus.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongsimstatus.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CurrentCommand")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongsimstatus.CurrentCommand))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CompletionDate")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongsimstatus.CompletionDate))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CurrentSpeedCommand")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongsimstatus.CurrentSpeedCommand))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "SpeedCommandCompletionDate")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gongsimstatus.SpeedCommandCompletionDate))
		initializerStatements += setValueField

	}

	map_UpdateState_Identifiers := make(map[*UpdateState]string)
	_ = map_UpdateState_Identifiers

	updatestateOrdered := []*UpdateState{}
	for updatestate := range stage.UpdateStates {
		updatestateOrdered = append(updatestateOrdered, updatestate)
	}
	sort.Slice(updatestateOrdered[:], func(i, j int) bool {
		return updatestateOrdered[i].Name < updatestateOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of UpdateState")
	for idx, updatestate := range updatestateOrdered {

		id = generatesIdentifier("UpdateState", idx, updatestate.Name)
		map_UpdateState_Identifiers[updatestate] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "UpdateState")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", updatestate.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// UpdateState %s values setup", updatestate.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(updatestate.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Duration")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", updatestate.Duration))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Period")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", updatestate.Period))
		initializerStatements += setValueField

	}


	// insertion initialization of objects to stage
	for idx, dummyagent := range dummyagentOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("DummyAgent", idx, dummyagent.Name)
		map_DummyAgent_Identifiers[dummyagent] = id

		// Initialisation of values
		if dummyagent.Engine != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Engine")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Engine_Identifiers[dummyagent.Engine])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, engine := range engineOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Engine", idx, engine.Name)
		map_Engine_Identifiers[engine] = id

		// Initialisation of values
	}

	for idx, event := range eventOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Event", idx, event.Name)
		map_Event_Identifiers[event] = id

		// Initialisation of values
	}

	for idx, gongsimcommand := range gongsimcommandOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongsimCommand", idx, gongsimcommand.Name)
		map_GongsimCommand_Identifiers[gongsimcommand] = id

		// Initialisation of values
	}

	for idx, gongsimstatus := range gongsimstatusOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("GongsimStatus", idx, gongsimstatus.Name)
		map_GongsimStatus_Identifiers[gongsimstatus] = id

		// Initialisation of values
	}

	for idx, updatestate := range updatestateOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("UpdateState", idx, updatestate.Name)
		map_UpdateState_Identifiers[updatestate] = id

		// Initialisation of values
	}


	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}
