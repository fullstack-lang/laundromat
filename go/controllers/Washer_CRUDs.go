// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/laundromat/go/models"
	"github.com/fullstack-lang/laundromat/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Washer__dummysDeclaration__ models.Washer
var __Washer_time__dummyDeclaration time.Duration

// An WasherID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getWasher updateWasher deleteWasher
type WasherID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// WasherInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postWasher updateWasher
type WasherInput struct {
	// The Washer to submit or modify
	// in: body
	Washer *orm.WasherAPI
}

// GetWashers
//
// swagger:route GET /washers washers getWashers
//
// # Get all washers
//
// Responses:
// default: genericError
//
//	200: washerDBResponse
func GetWashers(c *gin.Context) {
	db := orm.BackRepo.BackRepoWasher.GetDB()

	// source slice
	var washerDBs []orm.WasherDB
	query := db.Find(&washerDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	washerAPIs := make([]orm.WasherAPI, 0)

	// for each washer, update fields from the database nullable fields
	for idx := range washerDBs {
		washerDB := &washerDBs[idx]
		_ = washerDB
		var washerAPI orm.WasherAPI

		// insertion point for updating fields
		washerAPI.ID = washerDB.ID
		washerDB.CopyBasicFieldsToWasher(&washerAPI.Washer)
		washerAPI.WasherPointersEnconding = washerDB.WasherPointersEnconding
		washerAPIs = append(washerAPIs, washerAPI)
	}

	c.JSON(http.StatusOK, washerAPIs)
}

// PostWasher
//
// swagger:route POST /washers washers postWasher
//
// Creates a washer
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostWasher(c *gin.Context) {
	db := orm.BackRepo.BackRepoWasher.GetDB()

	// Validate input
	var input orm.WasherAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create washer
	washerDB := orm.WasherDB{}
	washerDB.WasherPointersEnconding = input.WasherPointersEnconding
	washerDB.CopyBasicFieldsFromWasher(&input.Washer)

	query := db.Create(&washerDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoWasher.CheckoutPhaseOneInstance(&washerDB)
	washer := (*orm.BackRepo.BackRepoWasher.Map_WasherDBID_WasherPtr)[washerDB.ID]

	if washer != nil {
		models.AfterCreateFromFront(&models.Stage, washer)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, washerDB)
}

// GetWasher
//
// swagger:route GET /washers/{ID} washers getWasher
//
// Gets the details for a washer.
//
// Responses:
// default: genericError
//
//	200: washerDBResponse
func GetWasher(c *gin.Context) {
	db := orm.BackRepo.BackRepoWasher.GetDB()

	// Get washerDB in DB
	var washerDB orm.WasherDB
	if err := db.First(&washerDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var washerAPI orm.WasherAPI
	washerAPI.ID = washerDB.ID
	washerAPI.WasherPointersEnconding = washerDB.WasherPointersEnconding
	washerDB.CopyBasicFieldsToWasher(&washerAPI.Washer)

	c.JSON(http.StatusOK, washerAPI)
}

// UpdateWasher
//
// swagger:route PATCH /washers/{ID} washers updateWasher
//
// # Update a washer
//
// Responses:
// default: genericError
//
//	200: washerDBResponse
func UpdateWasher(c *gin.Context) {
	db := orm.BackRepo.BackRepoWasher.GetDB()

	// Get model if exist
	var washerDB orm.WasherDB

	// fetch the washer
	query := db.First(&washerDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.WasherAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	washerDB.CopyBasicFieldsFromWasher(&input.Washer)
	washerDB.WasherPointersEnconding = input.WasherPointersEnconding

	query = db.Model(&washerDB).Updates(washerDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	washerNew := new(models.Washer)
	washerDB.CopyBasicFieldsToWasher(washerNew)

	// get stage instance from DB instance, and call callback function
	washerOld := (*orm.BackRepo.BackRepoWasher.Map_WasherDBID_WasherPtr)[washerDB.ID]
	if washerOld != nil {
		models.AfterUpdateFromFront(&models.Stage, washerOld, washerNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the washerDB
	c.JSON(http.StatusOK, washerDB)
}

// DeleteWasher
//
// swagger:route DELETE /washers/{ID} washers deleteWasher
//
// # Delete a washer
//
// default: genericError
//
//	200: washerDBResponse
func DeleteWasher(c *gin.Context) {
	db := orm.BackRepo.BackRepoWasher.GetDB()

	// Get model if exist
	var washerDB orm.WasherDB
	if err := db.First(&washerDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&washerDB)

	// get an instance (not staged) from DB instance, and call callback function
	washerDeleted := new(models.Washer)
	washerDB.CopyBasicFieldsToWasher(washerDeleted)

	// get stage instance from DB instance, and call callback function
	washerStaged := (*orm.BackRepo.BackRepoWasher.Map_WasherDBID_WasherPtr)[washerDB.ID]
	if washerStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, washerStaged, washerDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
